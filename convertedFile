const http = require("http"); // While we require it, Express handles the server creation
const qString = require("querystring");
const dbManager = require('./dbManager');
const express = require("express");
const app = express();

// Middleware to parse URL-encoded form data
app.use(express.urlencoded({ extended: false }));

// Middleware to parse JSON request bodies 
app.use(express.json());

// --- Helper Functions 

function userInfoForm(res) {
    const page = `
    <html>
    <head>
        <title>THE BEST SHOE STORE IN THE WORLD</title>
    </head>
    <body>
        <form method="post">
            <h1>THE BEST SHOE STORE IN THE WORLD</h1>
            <nav>
                <a href="/men">Men</a> | <a href="/women">Women</a> | <a href="/kids">Kids</a> |
                <a href="/cart">Cart</a> | <a href="/wishlist">Wishlist</a> | <a href="/">Home</a> |
                <a href="/contact">Contact</a>
            </nav>
            Shoe Size <select name="shoeSize">
                <option>4</option><option>5</option><option>6</option><option>7</option><option>8</option>
                <option>9</option><option>10</option><option>11</option><option>12</option><option>13</option>
                <option>14</option><option>15</option>
            </select><br>
            <input type="submit" value="checkout">
            Name <input name="name"><br>
            Address <input name="address"><br>
            Zipcode <input name="zipcode"><br>
            Number <input name="number"><br>
            <section class="categories">
                <h2>Shop by Category</h2>
                <a href="/men">Men's Shoes</a> | <a href="/women">Women's Shoes</a> | <a href="/kids">Kids' Shoes</a>
            </section>
            <a href="/cart">Cart</a> <a href="/wishlist">Wishlist</a> <a href="/">Home</a>
            <a href="/add">Add</a> <a href="/remove">Remove</a> <a href="/contact">Contact</a>
            <a href="/submit">Submit</a> <input type="submit" value="Proceed to checkout">
            <input type="submit" value="Order">
        </form>
        <footer>
            <p>&copy; 2025 The Best Shoe Store in the World</p>
        </footer>
    </body>
    </html>
    `;
    res.send(page);
}

function renderCategoryPage(res, title) {
    const page = `
    <html>
    <head>
        <title>${title}</title>
    </head>
    <body>
        <h1>${title}</h1>
        <nav>
            <a href="/men">Men</a> | <a href="/women">Women</a> | <a href="/kids">Kids</a> |
            <a href="/cart">Cart</a> | <a href="/wishlist">Wishlist</a> | <a href="/">Home</a> |
            <a href="/contact">Contact</a>
        </nav>
        Shoe Size <select name="size">
            <option>4</option><option>5</option><option>6</option><option>7</option><option>8</option>
            <option>9</option><option>10</option><option>11</option><option>12</option><option>13</option>
            <option>14</option><option>15</option>
        </select><br>
        <footer>
            <p>&copy; 2025 The Best Shoe Store in the World</p>
        </footer>
    </body>
    </html>
    `;
    res.send(page);
}

async function searchResp(result, response) {
    let page = `
    <html>
    <head>
        <title>Search Results</title>
    </head>
    <body>
        <h1>Search Results</h1>
        <nav>
            <a href="/men">Men</a> | <a href="/women">Women</a> | <a href="/kids">Kids</a> |
            <a href="/cart">Cart</a> | <a href="/wishlist">Wishlist</a> | <a href="/">Home</a> |
            <a href="/contact">Contact</a>
        </nav>
    `;

    if (result && result.data) {
        page += `<h2>Results for ${result.prop}: ${result[result.prop]}</h2>`;
        try {
            await result.data.forEach((item) => {
                
                page += `<p>Shoe Name: ${item.name || 'N/A'}, Price: $${item.price || 'N/A'}</p>`;
            });
        } catch (e) {
            page += `<p>Error: ${e.message}</p>`;
        }
    } else {
        page += `<p>No results found.</p>`;
    }

    page += `
        <br><br><a href="/">Back to Home</a>
    </body>
    </html>
    `;
    response.send(page);
}

// --- Routes ---

app.get('/', (req, res) => {
    userInfoForm(res); 
});

app.get('/home', (req, res) => {
    userInfoForm(res); 
});

app.get('/men', (req, res) => {
    renderCategoryPage(res, "MENS");
});

app.get('/women', (req, res) => {
    renderCategoryPage(res, "WOMENS");
});

app.get('/kids', (req, res) => {
    renderCategoryPage(res, "KIDS");
});

app.get('/cart', (req, res) => {
    
    res.send("<h1>Shopping Cart</h1><nav><a href='/'>Home</a></nav>");
});

app.get('/wishlist', (req, res) => {
    
    res.send("<h1>Wishlist</h1><nav><a href='/'>Home</a></nav>");
});

app.get('/contact', (req, res) => {
    
    res.send("<h1>Contact Us</h1><nav><a href='/'>Home</a></nav>");
});

app.get('/cart/remove/:productID', (req, res) => {
    const productId = req.params.productID;
   
    res.send(`<h1>Remove item ${productId} from cart</h1><nav><a href='/cart'>View Cart</a> | <a href='/'>Home</a></nav>`);
});

app.get('/checkout/:productID', (req, res) => {
    const productId = req.params.productID;
    
    res.send(`<h1>Checkout for product ${productId}</h1><nav><a href='/cart'>View Cart</a> | <a href='/'>Home</a></nav>`);
});

app.get('/search', (req, res) => {
    searchResp(null, res); 
});

app.post('/search', async (req, res) => {
    const { prop, value } = req.body;
    if (prop && value) {
        const col = dbManager.get().collection("products"); 
        try {
            const query = { [prop]: value };
            const cursor = col.find(query).limit(20); 
            const results = await cursor.toArray();
            searchResp({ data: results, prop: prop, [prop]: value }, res);
        } catch (e) {
            console.error("Search error:", e);
            res.status(500).send("Error during search.");
        }
    } else {
        searchResp(null, res); 
    }
});

app.post('/cart/add', async (req, res) => {
    const { productId, quantity } = req.body;
    let userId = req.session.userId;

    if (!userId) {
        return res.status(401).send("User not authenticated.");
    }

    if (!productId || isNaN(parseInt(quantity)) || parseInt(quantity) <= 0) {
        return res.status(400).send("Invalid product ID or quantity.");
    }

    try {
        const cartsCollection = dbManager.get().collection("carts"); 
        const quantityToAdd = parseInt(quantity);

        const result = await cartsCollection.updateOne(
            { userId: userId, "items.productId": productId },
            { $inc: { "items.$.quantity": quantityToAdd } },
            { upsert: true }
        );

        console.log("Cart update result:", result);
        res.redirect('/cart'); 
    } catch (err) {
        console.error("Error adding to cart:", err);
        res.status(500).send("Error adding item to cart.");
    }
});

// --- Start the server ---
const port = 6900;
app.listen(port, async () => {
    try {
        await dbManager.get("practiceDB"); // Ensure DB connection is established
        console.log(`Server is running on http://localhost:${port}`);
    } catch (e) {
        console.error("Database connection error:", e.message);
    }
});